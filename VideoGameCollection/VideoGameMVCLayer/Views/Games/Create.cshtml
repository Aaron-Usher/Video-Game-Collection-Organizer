@model VideoGameDataObjects.Game

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


<p>If you don't know a piece of information, don't guess, just leave it blank.</p>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Game</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Console, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*This datalist effectivley makes the text input into an editable drop-down list.
                  Of course, it doesn't work in Safari, because Safari is worse than IE, but there is a workaround for that.
                  Mind you, this workaround doesn't work, and I didn't have time to get it to work, but the broken workaround might
                  be better than nothing.*@
                <datalist id="consoles">
                    
                    @foreach (var console in ViewBag.Consoles)
                    {
                        <option value="@console" />
                    }
                </datalist>

                @Html.EditorFor(model => model.Console, new { htmlAttributes = new { @class = "form-control", list = "consoles"} })
                @Html.ValidationMessageFor(model => model.Console, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Developer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <datalist id="developers">

                    @foreach (var developer in ViewBag.Developers)
                    {
                        <option value="@developer " />
                    }
                </datalist>
                @Html.EditorFor(model => model.Developer, new { htmlAttributes = new { @class = "form-control", list = "developers" } })
                @Html.ValidationMessageFor(model => model.Developer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <datalist id="publishers">

                    @foreach (var publisher in ViewBag.Publishers)
                    {
                        <option value="@publisher" />
                    }
                </datalist>
                
                @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control", list = "publishers" } })
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/datalist.polyfill.min.js")

}
@*<script src="~/Scripts/createGame.js"></script>*@