@model PagedList.IPagedList<VideoGameDataObjects.Game>
@using PagedList.Mvc;

@*As mentioned elsewhere, much of this is taken directly from the following:
    http://www.itworld.com/article/2956575/development/how-to-sort-search-and-paginate-tables-in-asp-net-mvc-5.html*@

@{
    ViewBag.Title = "Index";

    string currentFilter = ViewBag.CurrentFilter;
    string currentSort = ViewBag.CurrentSort;
    if (string.IsNullOrEmpty(currentSort))
    {
        currentSort = "name";
    }
}

<h2>Index</h2>

@if(Model.TotalItemCount == 0)
{
    <p>Nothing to approve for now.</p>
}
else
{
    using (Html.BeginForm())
    {
        <div class="search-box">
            <form class="form-inline">
                <div class="form-group">
                    <input type="text" name="inquery" id="inquery" value="@ViewBag.searchQuery" class="search-text form-control" placeholder="Search..." />
                    @*<input type="number" id="pageSize" , name="pageSize" value="@ViewBag.PageSize" class="form-control" />*@
                </div>
                <button type="submit" class="btn btn-info">Search</button>
            </form>
        </div>
        <table class="table sorted-table">
            <tr>
                <th>
                    @Html.ActionLink("Name", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.NameSortParam))
                    @Html.SortIdentifier(currentSort, "name")
                </th>
                <th>
                    @Html.ActionLink("Console", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.ConsoleSortParam))
                    @Html.SortIdentifier(currentSort, "console")
                </th>
                <th>
                    @Html.ActionLink("Developer", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.DeveloperSortParam))
                    @Html.SortIdentifier(currentSort, "developer")
                </th>
                <th>
                    @Html.ActionLink("Publisher", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.PublisherSortParam))
                    @Html.SortIdentifier(currentSort, "publisher")
                </th>

                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Console)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Developer)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Publisher)
                    </td>


                    <td>
                        @Html.ActionLink("Details", "Approve", new { id = item.Id })

                    </td>
                </tr>
            }

        </table>

        if (Model.PageCount > 1)
        {
            <div class="pager">
                @Html.PagedListPager(Model, page => Url.Action("Index", new
       {
           page,
           sortOrder = ViewBag.currentSort,
           inquery = ViewBag.searchQuery

       }))
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            </div>
        }




    }


}

@*@Maintaing user page size is hard.
    <form class="form-inline">
        <div class="form-group">
            <label for="pageSize">Elements per page:</label>
            <input type="number" id="pageSize" , name="pageSize" value="@ViewBag.PageSize" class="form-control" />
        </div>
    </form>
*@